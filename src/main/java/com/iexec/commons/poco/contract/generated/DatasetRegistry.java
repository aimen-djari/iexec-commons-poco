/*
 * Copyright 2020-2023 IEXEC BLOCKCHAIN TECH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.iexec.commons.poco.contract.generated;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */
@SuppressWarnings("rawtypes")
public class DatasetRegistry extends Contract {
    public static final String BINARY = "0x60c0604052600e60808190526d14d25391d31157d110551054d15560921b60a09081526200003191600f919062000327565b5060408051808201909152600880825267111055105413d3d360c21b6020909201918252620000639160109162000327565b503480156200007157600080fd5b506040516200008090620003ac565b604051809103906000f0801580156200009d573d6000803e3d6000fd5b50604080518082018252601b81527f69457865632044617461736574205265676973747279202856352900000000006020808301919091528251808401909352600f83526e69457865634461746173657473563560881b908301529081816200010d6301ffc9a760e01b6200029e565b81516200012290600690602085019062000327565b5080516200013890600790602084019062000327565b506200014b6380ac58cd60e01b6200029e565b6200015d635b5e139f60e01b6200029e565b6200016f63780e9d6360e01b6200029e565b50600090506200017e62000323565b600a80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600b80546001600160a01b0319166001600160a01b038516179055604051620001f860208201620003ba565b601f1982820381018352601f9091011660405280516200022291600c916020919091019062000327565b50600c6040518082805460018160011615610100020316600290048015620002845780601f106200026157610100808354040283529182019162000284565b820191906000526020600020905b8154815290600101906020018083116200026f575b5050604051908190039020600d5550620003df9350505050565b6001600160e01b03198082161415620002fe576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b3390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200036a57805160ff19168380011785556200039a565b828001600101855582156200039a579182015b828111156200039a5782518255916020019190600101906200037d565b50620003a8929150620003c8565b5090565b610922806200353b83390190565b6103338062003e5d83390190565b5b80821115620003a85760008155600101620003c9565b61314c80620003ef6000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80636352211e11610125578063b88d4fde116100ad578063e985e9c51161007c578063e985e9c514610940578063ee97f7f31461096e578063eee3911114610976578063f2fde38b1461097e578063fe17fc7a146109a457610211565b8063b88d4fde14610813578063c3c5a547146108d7578063c4d66de8146108fd578063c87b56dd1461092357610211565b8063715018a6116100f4578063715018a6146107c55780637c2b2e71146107cd5780638da5cb5b146107d557806395d89b41146107dd578063a22cb465146107e557610211565b80636352211e146107725780636c0360eb1461078f5780636fa59bbc1461079757806370a082311461079f57610211565b80632f745c59116101a857806342842e0e1161017757806342842e0e146105db5780634f6ccce714610611578063530bf61e1461062e57806355f804b3146106fc57806357ff4a1e1461076a57610211565b80632f745c591461045b5780633121db1c146104875780633354bcdb14610505578063361b9cb4146105d357610211565b8063158ef93e116101e4578063158ef93e1461033557806318160ddd1461033d5780631b3ca54d1461035757806323b872dd1461042557610211565b806301ffc9a71461021657806306fdde0314610251578063081812fc146102ce578063095ea7b314610307575b600080fd5b61023d6004803603602081101561022c57600080fd5b50356001600160e01b031916610a72565b604080519115158252519081900360200190f35b610259610a95565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561029357818101518382015260200161027b565b50505050905090810190601f1680156102c05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102eb600480360360208110156102e457600080fd5b5035610b2b565b604080516001600160a01b039092168252519081900360200190f35b6103336004803603604081101561031d57600080fd5b506001600160a01b038135169060200135610b8d565b005b61023d610c68565b610345610c78565b60408051918252519081900360200190f35b6102eb6004803603608081101561036d57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561039757600080fd5b8201836020820111156103a957600080fd5b803590602001918460018302840111600160201b831117156103ca57600080fd5b919390929091602081019035600160201b8111156103e757600080fd5b8201836020820111156103f957600080fd5b803590602001918460018302840111600160201b8311171561041a57600080fd5b919350915035610c89565b6103336004803603606081101561043b57600080fd5b506001600160a01b03813581169160208101359091169060400135610da2565b6103456004803603604081101561047157600080fd5b506001600160a01b038135169060200135610df9565b6103336004803603604081101561049d57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156104c757600080fd5b8201836020820111156104d957600080fd5b803590602001918460018302840111600160201b831117156104fa57600080fd5b509092509050610e24565b6102eb6004803603608081101561051b57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561054557600080fd5b82018360208201111561055757600080fd5b803590602001918460018302840111600160201b8311171561057857600080fd5b919390929091602081019035600160201b81111561059557600080fd5b8201836020820111156105a757600080fd5b803590602001918460018302840111600160201b831117156105c857600080fd5b919350915035610ebc565b610259610f57565b610333600480360360608110156105f157600080fd5b506001600160a01b03813581169160208101359091169060400135610fe5565b6103456004803603602081101561062757600080fd5b5035611000565b6102eb6004803603608081101561064457600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561066e57600080fd5b82018360208201111561068057600080fd5b803590602001918460018302840111600160201b831117156106a157600080fd5b919390929091602081019035600160201b8111156106be57600080fd5b8201836020820111156106d057600080fd5b803590602001918460018302840111600160201b831117156106f157600080fd5b919350915035611016565b6103336004803603602081101561071257600080fd5b810190602081018135600160201b81111561072c57600080fd5b82018360208201111561073e57600080fd5b803590602001918460018302840111600160201b8311171561075f57600080fd5b5090925090506110b6565b610259611151565b6102eb6004803603602081101561078857600080fd5b50356111ac565b6102596111d4565b610259611235565b610345600480360360208110156107b557600080fd5b50356001600160a01b0316611290565b6103336112f8565b6102eb61139a565b6102eb6113a9565b6102596113b8565b610333600480360360408110156107fb57600080fd5b506001600160a01b0381351690602001351515611419565b6103336004803603608081101561082957600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561086357600080fd5b82018360208201111561087557600080fd5b803590602001918460018302840111600160201b8311171561089657600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061151e945050505050565b61023d600480360360208110156108ed57600080fd5b50356001600160a01b031661157c565b6103336004803603602081101561091357600080fd5b50356001600160a01b031661162a565b6102596004803603602081101561093957600080fd5b50356116ca565b61023d6004803603604081101561095657600080fd5b506001600160a01b0381358116916020013516611971565b6102eb61199f565b6103456119ae565b6103336004803603602081101561099457600080fd5b50356001600160a01b03166119b4565b6102eb600480360360808110156109ba57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156109e457600080fd5b8201836020820111156109f657600080fd5b803590602001918460018302840111600160201b83111715610a1757600080fd5b919390929091602081019035600160201b811115610a3457600080fd5b820183602082011115610a4657600080fd5b803590602001918460018302840111600160201b83111715610a6757600080fd5b919350915035611aad565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b215780601f10610af657610100808354040283529160200191610b21565b820191906000526020600020905b815481529060010190602001808311610b0457829003601f168201915b5050505050905090565b6000610b3682611b48565b610b715760405162461bcd60e51b815260040180806020018281038252602c815260200180613021602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610b98826111ac565b9050806001600160a01b0316836001600160a01b03161415610beb5760405162461bcd60e51b81526004018080602001828103825260218152602001806130c56021913960400191505060405180910390fd5b806001600160a01b0316610bfd611b55565b6001600160a01b03161480610c1e5750610c1e81610c19611b55565b611971565b610c595760405162461bcd60e51b8152600401808060200182810382526038815260200180612f746038913960400191505060405180910390fd5b610c638383611b59565b505050565b600e54600160a01b900460ff1681565b6000610c846002611bc7565b905090565b6000610d9787610d9288888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506010805460408051602060026000196101006001871615020190941693909304601f81018490048402820184019092528181529450919250830182828015610d4f5780601f10610d2457610100808354040283529160200191610d4f565b820191906000526020600020905b815481529060010190602001808311610d3257829003601f168201915b505050505088888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250611bd2915050565b611d51565b979650505050505050565b610db3610dad611b55565b82611f72565b610dee5760405162461bcd60e51b81526004018080602001828103825260318152602001806130e66031913960400191505060405180910390fd5b610c6383838361200e565b6001600160a01b0382166000908152600160205260408120610e1b908361215a565b90505b92915050565b610e2c611b55565b600a546001600160a01b03908116911614610e7c576040805162461bcd60e51b8152602060048201819052602482015260008051602061304d833981519152604482015290519081900360640190fd5b610c638383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061216692505050565b6000610d9787610d9288888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050600f805460408051602060026000196101006001871615020190941693909304601f81018490048402820184019092528181529450919250830182828015610d4f5780601f10610d2457610100808354040283529160200191610d4f565b600f805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610fdd5780601f10610fb257610100808354040283529160200191610fdd565b820191906000526020600020905b815481529060010190602001808311610fc057829003601f168201915b505050505081565b610c638383836040518060200160405280600081525061151e565b60008061100e6002846122cb565b509392505050565b6000610d97876110b188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506010805460408051602060026000196101006001871615020190941693909304601f81018490048402820184019092528181529450919250830182828015610d4f5780601f10610d2457610100808354040283529160200191610d4f565b6122e7565b6110be611b55565b600a546001600160a01b0390811691161461110e576040805162461bcd60e51b8152602060048201819052602482015260008051602061304d833981519152604482015290519081900360640190fd5b61114d82828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061238892505050565b5050565b6010805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610fdd5780601f10610fb257610100808354040283529160200191610fdd565b6000610e1e82604051806060016040528060298152602001612fd6602991396002919061239b565b60098054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b215780601f10610af657610100808354040283529160200191610b21565b600c805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610fdd5780601f10610fb257610100808354040283529160200191610fdd565b60006001600160a01b0382166112d75760405162461bcd60e51b815260040180806020018281038252602a815260200180612fac602a913960400191505060405180910390fd5b6001600160a01b0382166000908152600160205260409020610e1e90611bc7565b611300611b55565b600a546001600160a01b03908116911614611350576040805162461bcd60e51b8152602060048201819052602482015260008051602061304d833981519152604482015290519081900360640190fd5b600a546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600a80546001600160a01b0319169055565b600e546001600160a01b031681565b600a546001600160a01b031690565b60078054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b215780601f10610af657610100808354040283529160200191610b21565b611421611b55565b6001600160a01b0316826001600160a01b03161415611487576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060056000611494611b55565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556114d8611b55565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b61152f611529611b55565b83611f72565b61156a5760405162461bcd60e51b81526004018080602001828103825260318152602001806130e66031913960400191505060405180910390fd5b611576848484846123b2565b50505050565b6000611590826001600160a01b0316611b48565b80610e1e5750600e546001600160a01b031615801590610e1e5750600e546040805163c3c5a54760e01b81526001600160a01b0385811660048301529151919092169163c3c5a547916024808301926020929190829003018186803b1580156115f857600080fd5b505afa15801561160c573d6000803e3d6000fd5b505050506040513d602081101561162257600080fd5b505192915050565b611632611b55565b600a546001600160a01b03908116911614611682576040805162461bcd60e51b8152602060048201819052602482015260008051602061304d833981519152604482015290519081900360640190fd5b600e54600160a01b900460ff161561169957600080fd5b600e8054600160a01b60ff60a01b19909116176001600160a01b0319166001600160a01b0392909216919091179055565b60606116d582611b48565b6117105760405162461bcd60e51b815260040180806020018281038252602f815260200180613096602f913960400191505060405180910390fd5b60008281526008602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156117a55780601f1061177a576101008083540402835291602001916117a5565b820191906000526020600020905b81548152906001019060200180831161178857829003601f168201915b5050600954939450505050600260001961010060018416150201909116046117ce579050610a90565b80511561189f5760098160405160200180838054600181600116156101000203166002900480156118365780601f10611814576101008083540402835291820191611836565b820191906000526020600020905b815481529060010190602001808311611822575b5050825160208401908083835b602083106118625780518252601f199092019160209182019101611843565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050610a90565b60096118aa84612404565b60405160200180838054600181600116156101000203166002900480156119085780601f106118e6576101008083540402835291820191611908565b820191906000526020600020905b8154815290600101906020018083116118f4575b5050825160208401908083835b602083106119345780518252601f199092019160209182019101611915565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600b546001600160a01b031681565b600d5481565b6119bc611b55565b600a546001600160a01b03908116911614611a0c576040805162461bcd60e51b8152602060048201819052602482015260008051602061304d833981519152604482015290519081900360640190fd5b6001600160a01b038116611a515760405162461bcd60e51b8152600401808060200182810382526026815260200180612efe6026913960400191505060405180910390fd5b600a546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610d97876110b188888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050600f805460408051602060026000196101006001871615020190941693909304601f81018490048402820184019092528181529450919250830182828015610d4f5780601f10610d2457610100808354040283529160200191610d4f565b6000610e1e6002836124df565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611b8e826111ac565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610e1e826124eb565b60608484848460405160240180806020018060200180602001858152602001848103845288818151815260200191508051906020019080838360005b83811015611c26578181015183820152602001611c0e565b50505050905090810190601f168015611c535780820380516001836020036101000a031916815260200191505b50848103835287518152875160209182019189019080838360005b83811015611c86578181015183820152602001611c6e565b50505050905090810190601f168015611cb35780820380516001836020036101000a031916815260200191505b50848103825286518152865160209182019188019080838360005b83811015611ce6578181015183820152602001611cce565b50505050905090810190601f168015611d135780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b0316631636f2d560e21b179052985050505050505050505b949350505050565b600080611e7b600084866040516020018083805190602001908083835b60208310611d8d5780518252601f199092019160209182019101611d6e565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160a01b031660601b81526014019250505060405160208183030381529060405280519060200120600c8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e715780601f10611e4657610100808354040283529160200191611e71565b820191906000526020600020905b815481529060010190602001808311611e5457829003601f168201915b50505050506124ef565b600b546040805163347d5e2560e21b81526001600160a01b0392831660048201818152602483019384528851604484015288519596509386169463d1f5789494919389939091606490910190602085019080838360005b83811015611eea578181015183820152602001611ed2565b50505050905090810190601f168015611f175780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015611f3757600080fd5b505af1158015611f4b573d6000803e3d6000fd5b50505050611f6284826001600160a01b0316612600565b6001600160a01b03169392505050565b6000611f7d82611b48565b611fb85760405162461bcd60e51b815260040180806020018281038252602c815260200180612f48602c913960400191505060405180910390fd5b6000611fc3836111ac565b9050806001600160a01b0316846001600160a01b03161480611ffe5750836001600160a01b0316611ff384610b2b565b6001600160a01b0316145b80611d495750611d498185611971565b826001600160a01b0316612021826111ac565b6001600160a01b0316146120665760405162461bcd60e51b815260040180806020018281038252602981526020018061306d6029913960400191505060405180910390fd5b6001600160a01b0382166120ab5760405162461bcd60e51b8152600401808060200182810382526024815260200180612f246024913960400191505060405180910390fd5b6120b6838383610c63565b6120c1600082611b59565b6001600160a01b03831660009081526001602052604090206120e3908261272e565b506001600160a01b0382166000908152600160205260409020612106908261273a565b5061211360028284612746565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610e1b838361275c565b604080516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2600482015290516001600160a01b038416916302571be3916024808301926020929190829003018186803b1580156121cc57600080fd5b505afa1580156121e0573d6000803e3d6000fd5b505050506040513d60208110156121f657600080fd5b505160405163c47f002760e01b81526020600482018181528451602484015284516001600160a01b039094169363c47f002793869383926044909201919085019080838360005b8381101561225557818101518382015260200161223d565b50505050905090810190601f1680156122825780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156122a157600080fd5b505af11580156122b5573d6000803e3d6000fd5b505050506040513d602081101561157657600080fd5b60008080806122da86866127c0565b9097909650945050505050565b60008061237783856040516020018083805190602001908083835b602083106123215780518252601f199092019160209182019101612302565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160a01b031660601b81526014019250505060405160208183030381529060405280519060200120600d5461283b565b6001600160a01b0316949350505050565b805161114d906009906020840190612e16565b60006123a8848484612848565b90505b9392505050565b6123bd84848461200e565b6123c984848484612912565b6115765760405162461bcd60e51b8152600401808060200182810382526032815260200180612ecc6032913960400191505060405180910390fd5b60608161242957506040805180820190915260018152600360fc1b6020820152610a90565b8160005b811561244157600101600a8204915061242d565b60608167ffffffffffffffff8111801561245a57600080fd5b506040519080825280601f01601f191660200182016040528015612485576020820181803683370190505b50859350905060001982015b83156124d657600a840660300160f81b828280600190039350815181106124b457fe5b60200101906001600160f81b031916908160001a905350600a84049350612491565b50949350505050565b6000610e1b8383612a7a565b5490565b60008084471015612547576040805162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b825161259a576040805162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015290519081900360640190fd5b8383516020850187f590506001600160a01b0381166123a8576040805162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015290519081900360640190fd5b6001600160a01b03821661265b576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b61266481611b48565b156126b6576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b6126c260008383610c63565b6001600160a01b03821660009081526001602052604090206126e4908261273a565b506126f160028284612746565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610e1b8383612a92565b6000610e1b8383612b58565b60006123a884846001600160a01b038516612ba2565b8154600090821061279e5760405162461bcd60e51b8152600401808060200182810382526022815260200180612eaa6022913960400191505060405180910390fd5b8260000182815481106127ad57fe5b9060005260206000200154905092915050565b8154600090819083106128045760405162461bcd60e51b8152600401808060200182810382526022815260200180612fff6022913960400191505060405180910390fd5b600084600001848154811061281557fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b6000610e1b838330612c39565b600082815260018401602052604081205482816128e35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156128a8578181015183820152602001612890565b50505050905090810190601f1680156128d55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508460000160018203815481106128f657fe5b9060005260206000209060020201600101549150509392505050565b6000612926846001600160a01b0316612c94565b61293257506001611d49565b6060612a40630a85bd0160e11b612947611b55565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156129ae578181015183820152602001612996565b50505050905090810190601f1680156129db5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001612ecc603291396001600160a01b0388169190612c9a565b90506000818060200190516020811015612a5957600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60009081526001919091016020526040902054151590565b60008181526001830160205260408120548015612b4e5783546000198083019190810190600090879083908110612ac557fe5b9060005260206000200154905080876000018481548110612ae257fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080612b1257fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610e1e565b6000915050610e1e565b6000612b648383612a7a565b612b9a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e1e565b506000610e1e565b600082815260018401602052604081205480612c075750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556123ab565b82856000016001830381548110612c1a57fe5b90600052602060002090600202016001018190555060009150506123ab565b604080516001600160f81b031960208083019190915260609390931b6bffffffffffffffffffffffff191660218201526035810194909452605580850193909352805180850390930183526075909301909252805191012090565b3b151590565b60606123a8848460008585612cae85612c94565b612cff576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612d3e5780518252601f199092019160209182019101612d1f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612da0576040519150601f19603f3d011682016040523d82523d6000602084013e612da5565b606091505b5091509150610d9782828660608315612dbf5750816123ab565b825115612dcf5782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156128a8578181015183820152602001612890565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e5757805160ff1916838001178555612e84565b82800160010185558215612e84579182015b82811115612e84578251825591602001919060010190612e69565b50612e90929150612e94565b5090565b5b80821115612e905760008155600101612e9556fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a26469706673582212203fa1389dfda4e7984e84171d618c1be65066aa021c94330dc1c383d05ff19c2364736f6c634300060c0033608060405234801561001057600080fd5b50610902806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806358dbcb541161005b57806358dbcb54146101ac5780637b1039991461035c5780638da5cb5b14610380578063a61ca6c51461038857610088565b80630847c4311461008d57806308c18c3b1461010a5780631ba99d7e146101125780633121db1c1461012c575b600080fd5b610095610390565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100cf5781810151838201526020016100b7565b50505050905090810190601f1680156100fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61009561041d565b61011a610475565b60408051918252519081900360200190f35b6101aa6004803603604081101561014257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561016c57600080fd5b82018360208201111561017e57600080fd5b803590602001918460018302840111600160201b8311171561019f57600080fd5b50909250905061047b565b005b6101aa600480360360808110156101c257600080fd5b810190602081018135600160201b8111156101dc57600080fd5b8201836020820111156101ee57600080fd5b803590602001918460018302840111600160201b8311171561020f57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561026157600080fd5b82018360208201111561027357600080fd5b803590602001918460018302840111600160201b8311171561029457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156102e657600080fd5b8201836020820111156102f857600080fd5b803590602001918460018302840111600160201b8311171561031957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250610524915050565b610364610571565b604080516001600160a01b039092168252519081900360200190f35b610364610580565b6100956105fd565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104155780601f106103ea57610100808354040283529160200191610415565b820191906000526020600020905b8154815290600101906020018083116103f857829003601f168201915b505050505081565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104155780601f106103ea57610100808354040283529160200191610415565b60045481565b33610484610580565b6001600160a01b0316146104df576040805162461bcd60e51b815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015290519081900360640190fd5b61051f8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061065892505050565b505050565b61052d336107c3565b8351610540906001906020870190610839565b508251610554906002906020860190610839565b508151610568906003906020850190610839565b50600455505050565b6000546001600160a01b031681565b60008054604080516331a9108f60e11b815230600482015290516001600160a01b0390921691636352211e91602480820192602092909190829003018186803b1580156105cc57600080fd5b505afa1580156105e0573d6000803e3d6000fd5b505050506040513d60208110156105f657600080fd5b5051905090565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104155780601f106103ea57610100808354040283529160200191610415565b604080516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2600482015290516001600160a01b038416916302571be3916024808301926020929190829003018186803b1580156106be57600080fd5b505afa1580156106d2573d6000803e3d6000fd5b505050506040513d60208110156106e857600080fd5b505160405163c47f002760e01b81526020600482018181528451602484015284516001600160a01b039094169363c47f002793869383926044909201919085019080838360005b8381101561074757818101518382015260200161072f565b50505050905090810190601f1680156107745780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561079357600080fd5b505af11580156107a7573d6000803e3d6000fd5b505050506040513d60208110156107bd57600080fd5b50505050565b6000546001600160a01b031615610817576040805162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061087a57805160ff19168380011785556108a7565b828001600101855582156108a7579182015b828111156108a757825182559160200191906001019061088c565b506108b39291506108b7565b5090565b5b808211156108b357600081556001016108b856fea2646970667358221220090e144854c76e6549d600b7313da8c5e2097a48e09aa26eaabf30101d0d613a64736f6c634300060c0033608060405234801561001057600080fd5b50610313806100206000396000f3fe6080604052600436106100225760003560e01c8063d1f578941461003957610031565b366100315761002f6100ef565b005b61002f6100ef565b61002f6004803603604081101561004f57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561007a57600080fd5b82018360208201111561008c57600080fd5b803590602001918460018302840111640100000000831117156100ae57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610109945050505050565b6100f7610107565b6101076101026101eb565b610210565b565b60006101136101eb565b6001600160a01b03161461012657600080fd5b61012f82610234565b8051156101e7576000826001600160a01b0316826040518082805190602001908083835b602083106101725780518252601f199092019160209182019101610153565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101d2576040519150601f19603f3d011682016040523d82523d6000602084013e6101d7565b606091505b50509050806101e557600080fd5b505b5050565b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c35490565b3660008037600080366000845af43d6000803e80801561022f573d6000f35b3d6000fd5b61023d8161029c565b6102785760405162461bcd60e51b815260040180806020018281038252603b8152602001806102a3603b913960400191505060405180910390fd5b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c355565b3b15159056fe43616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a26469706673582212203178a2011c46abc2765f1016c5d417892138b904850d3e7866a1bfdfd1f3a76364736f6c634300060c0033";

    public static final String FUNC_DATAPOOL_TAG = "DATAPOOL_TAG";

    public static final String FUNC_DATASET_TAG = "DATASET_TAG";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BASEURI = "baseURI";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_INITIALIZED = "initialized";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISREGISTERED = "isRegistered";

    public static final String FUNC_MASTER = "master";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PREVIOUS = "previous";

    public static final String FUNC_PROXYCODE = "proxyCode";

    public static final String FUNC_PROXYCODEHASH = "proxyCodeHash";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETBASEURI = "setBaseURI";

    public static final String FUNC_SETNAME = "setName";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_CREATEDATASET = "createDataset";

    public static final String FUNC_PREDICTDATASET = "predictDataset";

    public static final String FUNC_CREATEDATAPOOL = "createDatapool";

    public static final String FUNC_PREDICTDATAPOOL = "predictDatapool";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1731816305374", "0x2F9fE52f3A5B6af517135eCf51c6445D1E99026C");
        _addresses.put("1731815538834", "0xf92AC82318DB5de250aadBB702a30EbC7Cbf63BA");
        _addresses.put("1731619694686", "0x97BD39fA767F52b19c47b1A404596D4D7fF2945b");
        _addresses.put("1731560222209", "0xDbed49aa9F9C09Fa02A218F831Af6F07392F4350");
        _addresses.put("1731807404895", "0xBaBBF8A48285944Bf01cEFdAeCE4b5d6101110CF");
        _addresses.put("1731619430569", "0x29d90456a79ac3C8bE3fFAd2c60d68681A0047fE");
        _addresses.put("1731534065391", "0x37564DE987Be7d6270308EA6aDF58e469D6e4FAB");
    }

    @Deprecated
    protected DatasetRegistry(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DatasetRegistry(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DatasetRegistry(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DatasetRegistry(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<String> DATAPOOL_TAG() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DATAPOOL_TAG, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> DATASET_TAG() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DATASET_TAG, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> baseURI() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BASEURI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String _previous) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_previous)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> initialized() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INITIALIZED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isRegistered(String _entry) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISREGISTERED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_entry)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> master() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MASTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> previous() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PREVIOUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> proxyCode() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROXYCODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> proxyCodeHash() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROXYCODEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBaseURI(String _baseURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBASEURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_baseURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setName(String _ens, String _name) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_ens), 
                new org.web3j.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createDataset(String _datasetOwner, String _datasetName, byte[] _datasetMultiaddr, byte[] _datasetChecksum) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEDATASET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_datasetOwner), 
                new org.web3j.abi.datatypes.Utf8String(_datasetName), 
                new org.web3j.abi.datatypes.DynamicBytes(_datasetMultiaddr), 
                new org.web3j.abi.datatypes.generated.Bytes32(_datasetChecksum)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> predictDataset(String _datasetOwner, String _datasetName, byte[] _datasetMultiaddr, byte[] _datasetChecksum) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PREDICTDATASET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_datasetOwner), 
                new org.web3j.abi.datatypes.Utf8String(_datasetName), 
                new org.web3j.abi.datatypes.DynamicBytes(_datasetMultiaddr), 
                new org.web3j.abi.datatypes.generated.Bytes32(_datasetChecksum)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createDatapool(String _datapoolOwner, String _datapoolName, byte[] _datapoolMultiaddr, byte[] _datapoolChecksum) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEDATAPOOL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_datapoolOwner), 
                new org.web3j.abi.datatypes.Utf8String(_datapoolName), 
                new org.web3j.abi.datatypes.DynamicBytes(_datapoolMultiaddr), 
                new org.web3j.abi.datatypes.generated.Bytes32(_datapoolChecksum)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> predictDatapool(String _datapoolOwner, String _datapoolName, byte[] _datapoolMultiaddr, byte[] _datapoolChecksum) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PREDICTDATAPOOL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_datapoolOwner), 
                new org.web3j.abi.datatypes.Utf8String(_datapoolName), 
                new org.web3j.abi.datatypes.DynamicBytes(_datapoolMultiaddr), 
                new org.web3j.abi.datatypes.generated.Bytes32(_datapoolChecksum)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static DatasetRegistry load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DatasetRegistry(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DatasetRegistry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DatasetRegistry(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DatasetRegistry load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DatasetRegistry(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DatasetRegistry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DatasetRegistry(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DatasetRegistry> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DatasetRegistry.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<DatasetRegistry> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DatasetRegistry.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DatasetRegistry> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DatasetRegistry.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DatasetRegistry> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DatasetRegistry.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
